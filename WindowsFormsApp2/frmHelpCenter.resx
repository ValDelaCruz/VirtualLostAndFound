<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lbl3.Text" xml:space="preserve">
    <value>

             The Virtual Lost and Found system is an online version of the lost and found. Just like the original lost and found, we have the finder and the seeker. The finder is
the one who found an item, while the seeker is the one who lost an item. 

             The finder may create a post about the item they have found. They must also include a picture of the item. Aside from this, the finder can also view what they 
have posted. If the finder wants to view all the other posts of the other finders, they must go to the Seeker’s View form. 

             The seeker will go to the Seeker’s View form and will be able to view all the finder’s post. They can search their lost item in the table, and from there, find the 
item they have lost. After finding their lost item they may request a claim for it. For security purposes, the system will ask the seeker to provide an image of their lost 
item as verification. 

             There will also be an admin that will be the one handling the request claims and transaction of items.   

             The purpose of creating the Virtual Lost and Found system is to make the Lost and Found transactions easier using this system.</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>For further inquiries, please contact the developers of the Virtual Lost and Found System. The developers' contact information are stated below:
     Name: Allysah Valerie C. Dela Cruz                        Name: Jaiza Mae M. De Vera                             Name: Justine Mae B. Juanima                               Name: Anne Louise D. Lopez
     Email: allydc19@gmail.com                                     Email: deverajaiza707@gmail.com                   Email: justinemaejuanima@gmail.com                  Email: annelouisedl@gmail.com
     Contact: 09392571580                                             Contact: 09090162028                                       Contact: 09217118598                                             Contact: 09754476749</value>
  </data>
  <data name="comboBox1.Items" xml:space="preserve">
    <value>               To claim an item in the system, click the Seeker button in the Home Page. You will be directed to the Seeker’s View form, then you will be able to see all the items that have been found. </value>
  </data>
  <data name="comboBox2.Items" xml:space="preserve">
    <value>               Yes, whether you are a student, teacher, or a staff of the school, you need an account to be able claim an item in the Virtual Lost and Found system. If you already have an account, click the Log In button in the Welcome Page, </value>
  </data>
  <data name="comboBox2.Items1" xml:space="preserve">
    <value>then simply log in to your account using the username and password you provided during registration. If not, then just click the Sign Up button and provide the information and picture needed then click the Submit button, then using </value>
  </data>
  <data name="comboBox3.Items" xml:space="preserve">
    <value>               To post an item you have found, click the Finder button in the Home Page, then you will be directed to Finder’s View form. Find the Report button, then click it, you will then be directed to the Finder’s Post form. </value>
  </data>
  <data name="comboBox3.Items1" xml:space="preserve">
    <value>Just fill out the information needed and upload an image of the item you have found. After that, click the Submit button. A message saying, “Successfully Posted!” will pop out. You will then be directed to the Finder’s View </value>
  </data>
  <data name="comboBox4.Items" xml:space="preserve">
    <value>               To view all the found items, click the Seeker button in the Home Page, and you will be directed to the Seeker’s View form, you will see a table there that has all the items found by the finders. </value>
  </data>
</root>